@startuml
autonumber
title ShareBoard - SharedBoardServer

participant AttendClient as AC <<Application>>
participant ChangePostItPositionRequest as REQ
participant DataInputStream as DIS
participant DataOutputStream as DOS
participant SBPMessageFormat as SBPMF
control ChangePostItPositionController as CONTROLLER <<ShareBoardServer>> <<Application>>
participant ChangePostItPositionService as SERVICE <<Service>>
participant Board as BOARD <<Domain>>
participant Cell as CELL <<Domain>>
participant BoardHistory as BOARD_HIS <<Domain>>
participant Person as PERSON <<Domain>>
database BoardRepository as BOARD_REPO <<Persistence>>


activate AC
AC -> DIS : create(socket)
activate DIS
deactivate DIS
AC -> DOS : create(socket)
activate DOS
deactivate DOS
AC -> DIS : readUTF()
activate DIS
return message
AC -> SBPMF : decodeFormat(message)
activate SBPMF
return arrayFormat
AC -> REQ : changePostItPosition(message, dos)
activate REQ
REQ -> SBPMF : decodeParams(message)
activate SBPMF
return params
REQ -> CONTROLLER : changePostItPosition(boardTitle, oldRow, oldColumn, newRow , newColumn)
activate CONTROLLER
CONTROLLER -> SERVICE : changePostItPosition(boardTitle, oldRow, oldColumn, newRow , newColumn)
activate SERVICE
SERVICE -> BOARD_REPO : findBoardByTitle(boardTitle)
activate BOARD_REPO
return board
SERVICE -> PERSON : boardParticipantOfBoard(board)
activate PERSON
return boardParticipant
SERVICE -> PERSON : boardOwnerOfBoard(board)
activate PERSON
return boardOwner
SERVICE -> BOARD : verifyPostItCanBeUpdated(oldRow, oldColumn, boardParticipant, boardOwner)
activate BOARD
BOARD -> CELL : currentPostIt()
activate CELL
return postIt
BOARD -> BOARD_HIS : checkIfPostItCanBeUpdatedByUser(postIt, boardParticipant, boardOwner)
activate BOARD_HIS
return boolean
return postIt
SERVICE -> BOARD : verifyIfCellIsAvailable(newRow, newColumn)
activate BOARD
return boolean
SERVICE -> BOARD : updateCellPostIt(null, oldRow, oldColumn)
activate BOARD
return boolean
SERVICE -> BOARD : updateCellPostIt(postIt, newRow, newColumn)
activate BOARD
return boolean
SERVICE -> BOARD_REPO : save(board)
activate BOARD_REPO
deactivate BOARD_REPO
return boolean
CONTROLLER --> REQ : boolean
deactivate CONTROLLER
REQ -> SBPMF : createAcknowledgeRequest()
activate SBPMF
return ackRequest
REQ -> DOS : writeUTF(ackRequest)
activate DOS
deactivate DOS
deactivate REQ
deactivate AC

@enduml